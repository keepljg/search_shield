// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: search-bleak.proto

/*
Package go_micro_srv_tutu_search_bleak is a generated protocol buffer package.

It is generated from these files:
	search-bleak.proto

It has these top-level messages:
	ShieldDateRequest
	CheckWord
	Response
	Status
*/
package go_micro_srv_tutu_search_bleak

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SearchBleak bleakService

type SearchBleakService interface {
	UpdateShieldData(ctx context.Context, in *ShieldDateRequest, opts ...client.CallOption) (*Response, error)
	CheckKeyword(ctx context.Context, in *CheckWord, opts ...client.CallOption) (*Response, error)
}

type searchBleakService struct {
	c    client.Client
	name string
}

func NewSearchBleakService(name string, c client.Client) SearchBleakService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.search_shield"
	}
	return &searchBleakService{
		c:    c,
		name: name,
	}
}

func (c *searchBleakService) UpdateShieldData(ctx context.Context, in *ShieldDateRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SearchBleak.UpdateShieldData", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchBleakService) CheckKeyword(ctx context.Context, in *CheckWord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SearchBleak.CheckKeyword", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchBleak bleakService

type SearchBleakHandler interface {
	UpdateShieldData(context.Context, *ShieldDateRequest, *Response) error
	CheckKeyword(context.Context, *CheckWord, *Response) error
}

func RegisterSearchBleakHandler(s server.Server, hdlr SearchBleakHandler, opts ...server.HandlerOption) error {
	type searchBleak interface {
		UpdateShieldData(ctx context.Context, in *ShieldDateRequest, out *Response) error
		CheckKeyword(ctx context.Context, in *CheckWord, out *Response) error
	}
	type SearchBleak struct {
		searchBleak
	}
	h := &searchBleakHandler{hdlr}
	return s.Handle(s.NewHandler(&SearchBleak{h}, opts...))
}

type searchBleakHandler struct {
	SearchBleakHandler
}

func (h *searchBleakHandler) UpdateShieldData(ctx context.Context, in *ShieldDateRequest, out *Response) error {
	return h.SearchBleakHandler.UpdateShieldData(ctx, in, out)
}

func (h *searchBleakHandler) CheckKeyword(ctx context.Context, in *CheckWord, out *Response) error {
	return h.SearchBleakHandler.CheckKeyword(ctx, in, out)
}
